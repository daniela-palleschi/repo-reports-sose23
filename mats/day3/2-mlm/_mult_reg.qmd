---
title: "Multiple Regression"
subtitle: "Models with more than one predictor"
author: "Daniela Palleschi"
institute: Humboldt-Universit√§t zu Berlin
footer: "Multiple Regression"
lang: en
date: 2023-04-14
format:
  revealjs: 
    output-file: slides-mult_reg.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    code-annotations: below
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    # number-sections: true
    toc: true
    toc-depth: 1
    toc-title: 'Topics'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
  html:
    self-contained: true
    output-file: sheet-mult_reg.html
    theme: [dark]
    number-sections: true
    toc: true
    code-overflow: wrap
    code-tools: true
  pdf:
    output-file: pdf-mult_reg.pdf
    toc: true
    number-sections: false
    colorlinks: true
    code-overflow: wrap
editor_options: 
  chunk_output_type: console
bibliography: references/references.json
csl: references/apa.csl
---

```{r}
## play sound if error encountered
### from: https://sejohnston.com/2015/02/24/make-r-beep-when-r-markdown-finishes-or-when-it-fails/
options(error = function(){    # Beep on error
  beepr::beep(sound = "wilhelm")
  Sys.sleep(2) # 
  }
 )
## and when knitting is complete
.Last <- function() {          # Beep on exiting session
  beepr::beep(sound = "ping")
  Sys.sleep(6) # allow to play for 6 seconds
  }
```

```{r, eval = T, cache = F}
# Create references.json file based on the citations in this script
# make sure you have 'bibliography: references.json' in the YAML
rbbt::bbt_update_bib("_mult_reg.qmd")
```

```{r}
knitr::opts_chunk$set(eval = T, # change this to 'eval = T' to reproduce the analyses; make sure to comment out
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F,
                      warning = F)
```

```{r}
# suppress scientific notation
options(scipen=999)

# load libraries
library(tidyverse)
library(ggplot2)
```

# Resources

Chapters 6 and 7 in @winter_statistics_2019

# Review: Linear Regression

- re-run our simple linear model
  + use the log transformed `ff`, but just call the model `fit_ff`

```{r}
#| echo: false

# read in data
df_crit_verb <- readr::read_csv(here::here("data/tidy_data_lifetime_pilot.csv"), 
                               # for special characters
                               locale = readr::locale(encoding = "latin1") 
                               ) |> 
  mutate_if(is.character,as.factor) |> # all character variables as factor
  filter(type == "critical", # only critical trials
         px != "px7",
         region == "verb")

# order factor levels
df_crit_verb$lifetime <- factor(df_crit_verb$lifetime, levels = c("living","dead"))

# set contrasts
contrasts(df_crit_verb$lifetime) <- c(-0.5,+0.5); contrasts(df_crit_verb$lifetime)

# fit simple linear model
fit_ff <- df_crit_verb %>%
  filter(ff > 0) %>%
  lm(log(ff) ~ lifetime, data = .)
```

```{r}
coef(fit_ff)
```

# Multiple regression

- a simple linear model is essentially just modelling the mean
- so is multiple regression, but takes more conditions into account:

$$
y = b_0 + b_1x + b_2x + ... + e
$$

- the slope index ($b_1$, $b_2$) differentiates between predictors

$$
log(ff) = b_0 + (b_1\times lifetime) + (b_2\times tense) + ... + e
$$

# Adding another factor

- in our experimental design we were interested in the effect of *lifetime* on the processing of two different *tenses*: the Present Perfect and Simple Future
  + in other words, we had two fixed factors: lifetime and tense

## Fit model

+ we can use `+` to indicate we have another fixed effect

```{r}
# multiple regression
fit_ff <- df_crit_verb %>%
  filter(ff > 0) %>%
  lm(log(ff) ~ lifetime + tense, data = .)
```

### Model summary

```{r}
summary(fit_ff)
```

# Assumptions

-   normality assumption
    -   residuals of the model are (approximately) normally distributed
-   constant variance assumption (homoscedasticity)
    -   spread of residuals should be (approximately) equal along the regression line
-   linearity (of residuals)
-   *absence of collinearity*
-   independence of data points

## Absence of collinearity

## Independence of data



# References {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::
